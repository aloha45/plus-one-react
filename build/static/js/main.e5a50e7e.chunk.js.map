{"version":3,"sources":["components/NavBar/NavBar.jsx","services/tokenService.js","services/userService.js","pages/LoginPage/LoginPage.jsx","components/SignupForm/SignupForm.jsx","pages/SignupPage/SignupPage.jsx","pages/App/App.js","serviceWorker.js","index.js"],"names":["NavBar","user","handleLogout","nav","className","id","href","name","onClick","getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","setToken","setItem","getUserFromToken","removeToken","signup","fetch","BASE_URL","method","headers","Headers","body","stringify","then","res","console","log","json","Error","err","tokenService","getUser","logout","login","creds","ok","LoginPage","state","email","pw","handleChange","e","setState","target","value","handleSubmit","a","preventDefault","userService","props","handleSignupOrLogin","history","push","alert","autoComplete","onSubmit","this","type","onChange","htmlFor","to","Component","SignupForm","password","passwordConf","updateMessage","message","disabled","isFormInvalid","SignupPage","msg","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.e5a50e7e.chunk.js","sourcesContent":["import React from 'react';\n\nconst NavBar = ({ user, handleLogout }) => {\n    let nav = user ?\n    <>\n      <nav>\n        <div className=\"nav-wrapper\">\n          <ul id=\"nav-mobile\" className=\"right\">\n            <li><a href=\" \" className=\"nav-link\">Welcome, {user.name}</a></li>\n            <li><a href=\" \" className=\"nav-link\" onClick={handleLogout}>Log Out</a></li>\n          </ul>\n        </div>\n      </nav>\n    </>\n    :\n    <>\n      <nav>\n        <div className=\"nav-wrapper\">\n          <ul id=\"nav-mobile\" className=\"right\">\n            <li><a href=\"/login\" className=\"nav-link\">Log In</a></li>\n            <li><a href=\"/signup\" className=\"nav-link\">Sign Up</a></li>\n          </ul>\n        </div>\n      </nav>\n    </>\n\n    return (\n    <>\n        {nav}\n    </>\n    )\n}\n\nexport default NavBar;","function setToken(token) {\n    if (token) {\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    } \n  }\n  \nfunction getUserFromToken () {\n  const token = getToken();\n  return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n}\n\nfunction getToken() {\n  let token = localStorage.getItem('token');\n  if (token) {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    if (payload.exp < Date.now() / 1000) {\n      localStorage.removeItem('token');\n      token = null;\n    }\n  }\n  return token;\n}\n\nfunction removeToken() {\n    localStorage.removeItem('token');\n}\n\nexport default {\n    setToken,\n    getToken,\n    getUserFromToken,\n    removeToken,\n  };","import tokenService from '../services/tokenService';\nconst BASE_URL = '/api/users/';\n\n  // The old signup function (if Sam's way fails...)\n// function signup(user) {\n//   return fetch(BASE_URL + 'signup', {\n//     method: 'POST',\n//     headers: new Headers({'Content-Type': 'application/json'}),\n//     body: JSON.stringify(user)\n//   })\n//   .then(res => {\n//     if (res.ok) return res.json();\n//     throw new Error('Email already taken!');\n//   })\n//   // Parameter destructuring!\n//   .then(({ token }) => {\n//     tokenService.setToken(token);\n//   });\n//   // the above could have been written as\n//   //.then((token) => token.token);\n// }\n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(user)\n  })\n  .then(res => {\n    console.log(res, '<-- response object')\n    return res.json();\n  })\n  .then(json => {\n    if(json.token) return json;\n    console.log(json, '<-- the error')\n    throw new Error(`${json.err}`)\n  })\n  .then(({ token }) => {\n    tokenService.setToken(token);\n  })\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error('Bad Credentials!');\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\nexport default {\n  signup,\n  getUser,\n  logout,\n  login\n};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './LoginPage.css';\nimport userService from '../../services/userService';\n\nclass LoginPage extends Component {\n  \n  state = {\n    email: '',\n    pw: ''\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await userService.login(this.state);\n      this.props.handleSignupOrLogin();\n      this.props.history.push('/');\n    } catch (err) {\n      alert('Invalid Credentials!');\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"LoginPage\">\n        <h3>Log In</h3>\n        <form className=\"col s12\" autoComplete=\"off\" onSubmit={this.handleSubmit} >\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"text\" autoComplete=\"off\" id=\"email\" className=\"active\" value={this.state.email} name=\"email\" onChange={this.handleChange} />\n              <label htmlFor=\"email\">Email</label>\n\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"password\" autoComplete=\"off\" className=\"active\" id=\"password\" value={this.state.pw} name=\"pw\" onChange={this.handleChange} />\n              <label htmlFor=\"password\">Password</label>\n\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col s12\">\n              <button className=\"btn green\">Log In<i className=\"material-icons right\">arrow_forward</i></button>&nbsp;&nbsp;&nbsp;\n              <Link className=\"btn red\" to='/'>Cancel<i className=\"material-icons right\">cancel</i></Link>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default LoginPage;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport userService from '../../services/userService';\n\nclass SignupForm extends Component {\n\n  state = {\n    name: '',\n    email: '',\n    password: '',\n    passwordConf: ''\n  };\n\n  handleChange = (e) => {\n    this.props.updateMessage('');\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await userService.signup(this.state);\n      this.props.handleSignupOrLogin();\n      this.props.history.push('/');\n    } catch (err) {\n      this.props.updateMessage(err.message);\n    }\n  }\n\n  isFormInvalid() {\n    return !(this.state.name && this.state.email && this.state.password === this.state.passwordConf);\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Sign Up</h3>\n        <form className=\"col s12\" autoComplete=\"off\" onSubmit={this.handleSubmit} >\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"text\" autoComplete=\"off\" className=\"active\" id=\"name\" value={this.state.name} name=\"name\" onChange={this.handleChange} />\n              <label htmlFor=\"name\">Name</label>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"text\" autoComplete=\"off\" className=\"active\" id=\"email\" value={this.state.email} name=\"email\" onChange={this.handleChange} />\n              <label htmlFor=\"email\">Email</label>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"password\" autoComplete=\"off\" className=\"active\" id=\"password\" value={this.state.password} name=\"password\" onChange={this.handleChange} />\n              <label htmlFor=\"password\">Password</label>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"password\" autoComplete=\"off\" className=\"active\" id=\"confirm\" value={this.state.passwordConf} name=\"passwordConf\" onChange={this.handleChange} />\n              <label htmlFor=\"confirm\">Confirm Password</label>\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <div className=\"col-sm-12 text-center\">\n              <button className=\"btn green\" disabled={this.isFormInvalid()}>Sign Up<i className=\"material-icons right\">person_add</i></button>&nbsp;&nbsp;\n              <Link className=\"btn red\" to='/'>Cancel<i className=\"material-icons right\">cancel</i></Link>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SignupForm;\n","import React, { Component } from 'react';\nimport SignupForm from '../../components/SignupForm/SignupForm';\nimport './SignupPage.css';\n\nclass SignupPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {message: ''}\n  }\n\n  updateMessage = (msg) => {\n    this.setState({message: msg});\n  }\n\n  render() {\n    return (\n      <div className='SignupPage'>\n        <SignupForm {...this.props} updateMessage={this.updateMessage} />\n        <p>{this.state.message}</p>\n      </div>\n    );\n  }\n}\n\nexport default SignupPage;","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom'\nimport './App.css';\nimport NavBar from '../../components/NavBar/NavBar';\nimport LoginPage from '../LoginPage/LoginPage';\nimport SignupPage from '../SignupPage/SignupPage';\nimport userService from '../../services/userService';\n\nclass App extends Component {\n  state = {\n    user: userService.getUser()\n  }\n\n  handleLogout = () => {\n    userService.logout();\n    this.setState({ user: null });\n  }\n\n  handleSignupOrLogin = () => {\n    this.setState({user: userService.getUser()});\n  }\n\n  render () {\n    return (\n      <>\n        <NavBar \n          user={this.state.user}\n          handleLogout={this.handleLogout}\n        />\n        <Route exact path='/signup' render={({ history }) => \n          <SignupPage\n            history={history}\n            handleSignupOrLogin={this.handleSignupOrLogin}\n          />\n        }/>\n        <Route exact path='/login' render={({ history }) => \n          <LoginPage\n            history={history}\n            handleSignupOrLogin={this.handleSignupOrLogin}\n          />\n        }/>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App/App';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <Route render={({history}) => <App history={history} />} />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}